package view;

import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 * Interface used to read all persons.
 * @author Francesc Perez
 * @version 1.1.0
 */
public class ReadAll extends javax.swing.JDialog {

    public ReadAll(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment((int)JTable.CENTER_ALIGNMENT);
        table.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        table.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        table.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        table.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        setLocationRelativeTo(null);
    }

    public JTable getTable() {
        return table;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Read All - People v1.1.0");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIF", "Name", "Date of Birth", "Photo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 336;
        gridBagConstraints.ipady = 193;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(24, 24, 0, 24);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Author: francesc.perez@stucom.com - Version 1.1.0");
        jLabel2.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 171;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 24, 12, 24);
        getContentPane().add(jLabel2, gridBagConstraints);

        jButton1.setText("EXPORT DATA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 270, 0, 0);
        getContentPane().add(jButton1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Que haremos?
        /* Obtendremos los datos de la tabla. Una vez hecho esto le daremos al 
        usuario la posibilidad de guardar toda la información visible al hacer 
        clic en "EXPORT DATA". 
        Tras esto se abrirá un JFileChooser, con el que el usuario podrá escoger
        donde poner el documento CSV. Una vez tengamos esto, generaremos el documento */
        
        //Obtendremos la tabla con los datos de las personas
        JTable tabla = getTable();

        //-------------------
        //RUTA DE LA CARPETA:
        //-------------------
        //Usarmos JFileChooser para que el usuario elija dónde guardar el CSV
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo CSV");

        //-------------------
        //ARCHIVO:
        //-------------------
        //Obtenemos la fecha actual
        String fechaActual = new java.text.SimpleDateFormat("yyyyMMdd").format(new java.util.Date());
        
        //Creamos el nombre del archivo y ponemos la fecha actual en la que se 
        //está exportando el csv
        String nombreArchivo = "people_data_" + fechaActual + ".csv";
        
        //Agregaremos el nombre del archivo a "fileChooser", para qu además de 
        //buscar la carpeta luego, se muestre el nombre completo ya
        fileChooser.setSelectedFile(new java.io.File(nombreArchivo));

        //-------------------
        //ABRIR RUTA DE LA CARPETA:
        //-------------------
        //Mostramos con el JFileChooser para que el usuario elija dónde guardar
        int seleccion = fileChooser.showSaveDialog(this);

        //Si el usuario hace clic en guardar, interpretaremos que está todo okey
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            
            //Obtenemos el archivo seleccionado
            java.io.File archivo = fileChooser.getSelectedFile();
            
            try (
                //Crearemos un escritor de texto para escribir en el archivo
                java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileWriter(archivo))
            ) {
                //Obtenemos el modelo de la tabla (de JTable, la primera linea) (filas y columnas)
                javax.swing.table.TableModel modelo = tabla.getModel();

                //Escribir la primera línea: columnas
                //--------------
                //Le preguntaremos cuántas columnas hay (modelo.getColumnCount())
                for (int i = 0; i < modelo.getColumnCount(); i++) {
                    
                    pw.print(modelo.getColumnName(i)); // Escribimos el nombre de la columna
                    
                    if (i < modelo.getColumnCount() - 1) {
                        
                        pw.print(","); // Agregamos una coma si no es la última columna
                    }
                }
                pw.println(); //Saltamos a la siguiente línea

                //Escribir los datos de cada fila
                //--------------
                //Le preguntaremos cuántas filas hay (modelo.getRowCount())
                for (int fila = 0; fila < modelo.getRowCount(); fila++) {
                    
                    for (int columna = 0; columna < modelo.getColumnCount(); columna++) {
                        
                        //Obtenemos el valor de la celda
                        Object valor = modelo.getValueAt(fila, columna);
                        
                        //Convertimos el valor en texto (si es null, ponemos vacío)
                        String texto = (valor != null) ? valor.toString() : "";

                        //Escapamos comillas dobles dentro del texto
                        texto = texto.replace("\"", "\"\"");

                        //Si el texto contiene coma o salto de línea, lo encerramos entre comillas
                        if (texto.contains(",") || texto.contains("\n")) {
                            
                            texto = "\"" + texto + "\"";
                        }

                        pw.print(texto); // Escribimos el valor

                        if (columna < modelo.getColumnCount() - 1) {
                            
                            //Agregamos una coma si no es la última columna
                            pw.print(","); 
                        }
                    }
                    //Al terminar cada fila, saltamos a la siguiente
                    pw.println(); 
                }
                
                //SI todo está correcto:
                javax.swing.JOptionPane.showMessageDialog(this, "[OK] Datos exportados correctamente como " + nombreArchivo);

            } catch (java.io.IOException ex) {
                
                //SI algo salió mal:
                javax.swing.JOptionPane.showMessageDialog(this, "[X] Error al exportar los datos: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
